// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Unit {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  email String?
  phone String?
  text  String?

  departments  Department[]
  Collaborator Collaborator[]
  Document     Document[]
}

model Department {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  initials  String?  @unique
  createdAt DateTime @default(now())
  email     String?

  unit         Unit           @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId       Int
  Collaborator Collaborator[]
  Document     Document[]
}

model Collaborator {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String?
  createdAt DateTime @default(now())
  hireDate  DateTime @default(now())

  unit   Unit @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId Int

  department          Department @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  departmentId        Int
  position            Position?  @relation(fields: [positionId], references: [id])
  positionId          Int?
  documentElaboration Document[] @relation("ElaboratorReferral") // ElaboratorReferral is the name of the relation
  documentRevision    Document[] @relation("RevisorReferral") // RevisorReferral is the name of the relation
  documentApprovation Document[] @relation("ApproverReferral") // ApproverReferral is the name of the relation
}

model PositionCategory {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())

  position Position[]
}

model Position {
  id                     Int      @id @default(autoincrement())
  name                   String   @unique
  requiredQualifications String?
  desiredQualifications  String?
  requiredEducation      String?
  desiredEducation       String?
  requiredExperience     String?
  desiredExperience      String?
  responsibilities       String?
  version                Int      @default(000)
  revisionAt             DateTime @default(now())
  alterations            String
  createdAt              DateTime @default(now())

  positionCategory   PositionCategory @relation(fields: [positionCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  positionCategoryId Int

  Collaborator Collaborator[]
}

model Document {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  reference String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  fileURL   String?
  pdfURL    String?

  elaborator   Collaborator   @relation(fields: [elaboratorId], references: [id], name: "ElaboratorReferral", onDelete: Cascade, onUpdate: Cascade)
  elaboratorId Int
  elaboratorAt DateTime?
  revisor      Collaborator?  @relation(fields: [revisorId], references: [id], name: "RevisorReferral", onDelete: Cascade, onUpdate: Cascade)
  revisorId    Int
  revisorAt    DateTime?
  approver     Collaborator?  @relation(fields: [approverId], references: [id], name: "ApproverReferral", onDelete: Cascade, onUpdate: Cascade)
  approverId   Int
  approverAt   DateTime?
  status       DocumentStatus @default(ELABORATION)

  unit               Unit              @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId             Int
  department         Department        @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  departmentId       Int
  DocumentCategory   DocumentCategory? @relation(fields: [documentCategoryId], references: [id])
  documentCategoryId Int?
}

model DocumentCategory {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())

  documentType DocumentType
  codeFormat   DocumentCodeFormat

  document Document[]
}

enum DocumentType {
  WORD
  EXCEL
  PDF
}

enum DocumentCodeFormat {
  SIMPLE
  NUMBERED_BY_DEPARTMENT
  NUMBERED_SEPARATELY_BY_DEPARTMENT
}

enum DocumentStatus {
  ELABORATION
  REVISION
  APPROVAL
  APPROVED
  REJECTED
  OBSOLETE
  INATIVE
}

model ProviderCategory {
  id                            Int      @id @default(autoincrement())
  name                          String   @unique
  requiredInitialQualification  Boolean  @default(false)
  requiredPeriodicQualification Boolean  @default(false)
  periodicCheck                 Boolean  @default(false)
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
}
