# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Collaborator {
  createdAt: DateTime!
  department: ResolveDepartments!
  documents: [ResolveDocuments!]
  email: String!
  hireDate: DateTime!
  id: Int!
  name: String!
  phone: String
  position: ResolvePositions!
  unit: ResolveUnit!
}

input CreateCollaboratorInput {
  departmentId: Int!
  email: String!
  name: String!
  phone: String
  positionId: Int!
  unitId: Int!
}

input CreateDepartmentInput {
  email: String
  initials: String
  name: String!
  unitId: Int
}

input CreateDocumentsCategoryInput {
  codeFormat: DocumentCodeFormat = SIMPLE
  documentType: DocumentType
  name: String!
}

input CreateInitialQualificationAnswerInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreateInitialQualificationInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreateInitialQualificationQuestionInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreateInitialQualificationQuestionsTypeInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreatePositionCategoryInput {
  name: String!
}

input CreatePositionInput {
  alterations: String!
  desiredEducation: String
  desiredExperience: String
  desiredQualifications: String
  name: String!
  positionCategoryId: Int!
  requiredEducation: String
  requiredExperience: String
  requiredQualifications: String
  revisionAt: DateTime!
  version: Int!
}

input CreateProviderInput {
  address: String
  city: String
  cnpj: String
  contactName: String
  crm: String
  district: String
  email: String
  name: String!
  phone: String
  providerCritical: Boolean!
  state: String
  tradeName: String!
  website: String
  zipCode: String
}

input CreateProvidersCategoryInput {
  name: String!
  periodicCheck: Boolean
  requiredPeriodicEvaluation: Boolean
  requiresInitialQualification: Boolean
}

input CreateUnitInput {
  email: String
  name: String!
  phone: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Department {
  createdAt: DateTime!
  email: String
  id: Int!
  initials: String
  name: String!
  unit: ResolveUnit
}

type Document {
  DocumentCategory: ResolveDocumentsCategory!
  approver: ResolveCollaborators
  approverAt: DateTime
  createdAt: DateTime!
  department: ResolveDepartments!
  elaborator: ResolveCollaborators!
  elaboratorAt: DateTime
  fileURL: String
  id: Int!
  name: String!
  pdfURL: String
  reference: String
  revisor: ResolveCollaborators
  revisorAt: DateTime
  status: DocumentStatus!
  unit: ResolveUnit!
  updatedAt: DateTime
}

enum DocumentCodeFormat {
  NUMBERED_BY_DEPARTMENT
  NUMBERED_SEPARATELY_BY_DEPARTMENT
  SIMPLE
}

enum DocumentStatus {
  APPROVAL
  APPROVED
  ELABORATION
  INATIVE
  OBSOLETE
  REJECTED
  REVISION
}

enum DocumentType {
  EXCEL
  PDF
  WORD
}

type DocumentsCategory {
  codeFormat: DocumentCodeFormat!
  createdAt: DateTime!
  documentType: DocumentType!
  documents: [ResolveDocuments!]
  id: Int!
  name: String!
}

type InitialQualification {
  createdAt: DateTime!
  id: Int!
  initialQualificationQuestions: [ResolveInitialQualificationQuestion!]!
  initialQualificationQuestionsType: [ResolveInitialQualificationQuestionsType!]!
  provider: ResolveProvider!
  qualificationStatus: QualificationStatus!
  updatedAt: DateTime!
}

type InitialQualificationAnswer {
  answer: InitialQualificationAnswerType!
  createdAt: DateTime!
  id: Int!
  initialQualificationQuestion: ResolveInitialQualificationQuestion!
  updatedAt: DateTime!
}

enum InitialQualificationAnswerType {
  NO
  NOT_APPLICABLE
  YES
}

type InitialQualificationQuestion {
  createdAt: DateTime!
  id: Int!
  initialQualification: ResolveInitialQualification!
  initialQualificationAnswer: [ResolveInitialQualificationAnswer!]!
  initialQualificationQuestionsType: ResolveInitialQualificationQuestionsType!
  question: String!
  updatedAt: DateTime!
}

type InitialQualificationQuestionsType {
  createdAt: DateTime!
  id: Int!
  initialQualification: ResolveInitialQualification!
  initialQualificationQuestions: [ResolveInitialQualificationQuestion!]!
  providerCategory: ResolveProvidersCategory!
  updatedAt: DateTime!
}

type Mutation {
  createCollaborator(createCollaboratorInput: CreateCollaboratorInput!): Collaborator!
  createDepartment(createDepartmentInput: CreateDepartmentInput!): Department!
  createDocumentsCategory(createDocumentsCategoryInput: CreateDocumentsCategoryInput!): DocumentsCategory!
  createInitialQualification(createInitialQualificationInput: CreateInitialQualificationInput!): InitialQualification!
  createInitialQualificationAnswer(createInitialQualificationAnswerInput: CreateInitialQualificationAnswerInput!): InitialQualificationAnswer!
  createInitialQualificationQuestion(createInitialQualificationQuestionInput: CreateInitialQualificationQuestionInput!): InitialQualificationQuestion!
  createInitialQualificationQuestionsType(createInitialQualificationQuestionsTypeInput: CreateInitialQualificationQuestionsTypeInput!): InitialQualificationQuestionsType!
  createPosition(createPositionInput: CreatePositionInput!): Position!
  createPositionCategory(createPositionCategoryInput: CreatePositionCategoryInput!): PositionCategory!
  createProvider(createProviderInput: CreateProviderInput!): Provider!
  createProvidersCategory(createProvidersCategoryInput: CreateProvidersCategoryInput!): ProvidersCategory!
  createUnit(createUnitInput: CreateUnitInput!): Unit!
  removeCollaborator(id: Int!): Collaborator!
  removeDepartment(id: Int!): Department!
  removeDocument(id: Int!): Document!
  removeDocumentsCategory(id: Int!): DocumentsCategory!
  removeInitialQualification(id: Int!): InitialQualification!
  removeInitialQualificationAnswer(id: Int!): InitialQualificationAnswer!
  removeInitialQualificationQuestion(id: Int!): InitialQualificationQuestion!
  removeInitialQualificationQuestionsType(id: Int!): InitialQualificationQuestionsType!
  removePosition(id: Int!): Position!
  removePositionCategory(id: Int!): PositionCategory!
  removeProvider(id: Int!): Provider!
  removeProvidersCategory(id: Int!): ProvidersCategory!
  removeUnit(id: Int!): Unit!
  updateCollaborator(updateCollaboratorInput: UpdateCollaboratorInput!): Collaborator!
  updateDepartment(updateDepartmentInput: UpdateDepartmentInput!): Department!
  updateDocumentsCategory(updateDocumentsCategoryInput: UpdateDocumentsCategoryInput!): DocumentsCategory!
  updateInitialQualification(updateInitialQualificationInput: UpdateInitialQualificationInput!): InitialQualification!
  updateInitialQualificationAnswer(updateInitialQualificationAnswerInput: UpdateInitialQualificationAnswerInput!): InitialQualificationAnswer!
  updateInitialQualificationQuestion(updateInitialQualificationQuestionInput: UpdateInitialQualificationQuestionInput!): InitialQualificationQuestion!
  updateInitialQualificationQuestionsType(updateInitialQualificationQuestionsTypeInput: UpdateInitialQualificationQuestionsTypeInput!): InitialQualificationQuestionsType!
  updatePosition(updatePositionInput: UpdatePositionInput!): Position!
  updatePositionCategory(updatePositionCategoryInput: UpdatePositionCategoryInput!): PositionCategory!
  updateProvider(updateProviderInput: UpdateProviderInput!): Provider!
  updateProvidersCategory(updateProvidersCategoryInput: UpdateProvidersCategoryInput!): ProvidersCategory!
  updateUnit(updateUnitInput: UpdateUnitInput!): Unit!
  uploadFile: Uploads!
}

type Position {
  alterations: String!
  collaborator: ResolveCollaborators
  createdAt: DateTime!
  desiredEducation: String
  desiredExperience: String
  desiredQualifications: String
  id: Int!
  name: String!
  positionCategory: ResolvePositionCategories!
  requiredEducation: String
  requiredExperience: String
  requiredQualifications: String
  revisionAt: DateTime!
  version: Int!
}

type PositionCategory {
  createdAt: DateTime!
  id: Int!
  name: String!
  positions: [ResolvePositions!]
}

type Provider {
  address: String
  city: String
  cnpj: String
  contactName: String
  createdAt: DateTime
  crm: String
  department: ResolveDepartments!
  district: String
  email: String
  id: Int!
  initialQualification: [ResolveInitialQualification!]!
  name: String!
  phone: String
  providerCritical: Boolean!
  providersCategory: ResolveProvidersCategory!
  state: String
  tradeName: String!
  updatedAt: DateTime
  website: String
  zipCode: String
}

type ProvidersCategory {
  createdAt: DateTime
  id: Int!
  initialQualificationQuestionsType: [ResolveInitialQualificationQuestionsType!]
  name: String!
  periodicCheck: Boolean
  provider: [ResolveProvider!]
  requiredPeriodicEvaluation: Boolean
  requiresInitialQualification: Boolean
  updatedAt: DateTime
}

enum QualificationStatus {
  NOT_QUALIFIED
  PENDING
  QUALIFIED
  QUALIFIED_WITH_RESTRICTIONS
}

type Query {
  collaborator(id: Int!): Collaborator!
  collaborators: [Collaborator!]!
  department(id: Int!): Department!
  departments: [Department!]!
  document(id: Int!): Document!
  documents: [Document!]!
  documentsCategories: [DocumentsCategory!]!
  documentsCategory(id: Int!): DocumentsCategory!
  initialQualification(id: Int!): InitialQualification!
  initialQualificationAnswer(id: Int!): InitialQualificationAnswer!
  initialQualificationAnswers: [InitialQualificationAnswer!]!
  initialQualificationQuestion(id: Int!): InitialQualificationQuestion!
  initialQualificationQuestions: [InitialQualificationQuestion!]!
  initialQualificationQuestionsType(id: Int!): InitialQualificationQuestionsType!
  initialQualificationQuestionsTypes: [InitialQualificationQuestionsType!]!
  initialQualifications: [InitialQualification!]!
  position(id: Int!): Position!
  positionCategories: [PositionCategory!]!
  positionCategory(id: Int!): PositionCategory!
  positions: [Position!]!
  provider(id: Int!): Provider!
  providers: [Provider!]!
  providersCategories: [ProvidersCategory!]!
  providersCategory(id: Int!): ProvidersCategory!
  unit(id: Int!): Unit!
  units: [Unit!]!
}

type ResolveCollaborators {
  createdAt: DateTime!
  email: String!
  hireDate: DateTime!
  id: Int!
  name: String!
  phone: String
}

type ResolveDepartments {
  createdAt: DateTime!
  email: String
  id: Int!
  initials: String
  name: String!
}

type ResolveDocuments {
  approverAt: DateTime
  createdAt: DateTime!
  elaboratorAt: DateTime
  fileURL: String
  id: Int!
  name: String!
  pdfURL: String
  reference: String
  revisorAt: DateTime
  status: DocumentStatus!
  updatedAt: DateTime
}

type ResolveDocumentsCategory {
  codeFormat: DocumentCodeFormat!
  createdAt: DateTime!
  documentType: DocumentType!
  id: Int!
  name: String!
}

type ResolveInitialQualification {
  createdAt: DateTime!
  id: Int!
  qualificationStatus: QualificationStatus!
  updatedAt: DateTime!
}

type ResolveInitialQualificationAnswer {
  answer: InitialQualificationAnswerType!
  createdAt: DateTime!
  id: Int!
  updatedAt: DateTime!
}

type ResolveInitialQualificationQuestion {
  createdAt: DateTime!
  id: Int!
  question: String!
  updatedAt: DateTime!
}

type ResolveInitialQualificationQuestionsType {
  createdAt: DateTime!
  id: Int!
  updatedAt: DateTime!
}

type ResolvePositionCategories {
  createdAt: DateTime!
  id: Int!
  name: String!
}

type ResolvePositions {
  alterations: String!
  createdAt: DateTime!
  desiredEducation: String
  desiredExperience: String
  desiredQualifications: String
  id: Int!
  name: String!
  requiredEducation: String
  requiredExperience: String
  requiredQualifications: String
  revisionAt: DateTime!
  version: Int!
}

type ResolveProvider {
  address: String
  city: String
  cnpj: String
  contactName: String
  createdAt: DateTime
  crm: String
  district: String
  email: String
  id: Int!
  name: String!
  phone: String
  providerCritical: Boolean!
  state: String
  tradeName: String!
  updatedAt: DateTime
  website: String
  zipCode: String
}

type ResolveProvidersCategory {
  createdAt: DateTime
  id: Int!
  name: String!
  periodicCheck: Boolean
  requiredPeriodicEvaluation: Boolean
  requiresInitialQualification: Boolean
  updatedAt: DateTime
}

type ResolveUnit {
  email: String
  id: Int!
  name: String!
  phone: String
}

type Unit {
  collaborators: [ResolveCollaborators!]
  departments: [ResolveDepartments!]
  documents: [ResolveDocuments!]
  email: String
  id: Int!
  name: String!
  phone: String
}

input UpdateCollaboratorInput {
  departmentId: Int
  email: String
  id: Int!
  name: String
  phone: String
  positionId: Int
  unitId: Int
}

input UpdateDepartmentInput {
  email: String
  id: Int!
  initials: String
  name: String
  unitId: Int
}

input UpdateDocumentsCategoryInput {
  codeFormat: DocumentCodeFormat = SIMPLE
  documentType: DocumentType
  id: Int!
  name: String
}

input UpdateInitialQualificationAnswerInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateInitialQualificationInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateInitialQualificationQuestionInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateInitialQualificationQuestionsTypeInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdatePositionCategoryInput {
  id: Int!
  name: String
}

input UpdatePositionInput {
  alterations: String
  desiredEducation: String
  desiredExperience: String
  desiredQualifications: String
  id: Int!
  name: String
  positionCategoryId: Int
  requiredEducation: String
  requiredExperience: String
  requiredQualifications: String
  revisionAt: DateTime
  version: Int
}

input UpdateProviderInput {
  address: String
  city: String
  cnpj: String
  contactName: String
  crm: String
  district: String
  email: String
  id: Int!
  name: String
  phone: String
  providerCritical: Boolean
  state: String
  tradeName: String
  website: String
  zipCode: String
}

input UpdateProvidersCategoryInput {
  id: Int!
  name: String
  periodicCheck: Boolean
  requiredPeriodicEvaluation: Boolean
  requiresInitialQualification: Boolean
}

input UpdateUnitInput {
  email: String
  id: Int!
  name: String
  phone: String
}

type Uploads {
  fileName: String!
  fileType: String!
  fileUrl: String!
}